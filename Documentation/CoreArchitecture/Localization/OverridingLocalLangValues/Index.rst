.. ==================================================
.. FOR YOUR INFORMATION
.. --------------------------------------------------
.. -*- coding: utf-8 -*- with BOM.

.. include:: ../../../Includes.txt


Overriding LOCAL\_LANG values
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TYPO3 offers an API for overriding LOCAL\_LANG values in the backend
by custom files you set up. Provided that the inclusion of the
locallang file is handled by the language class then your custom file
will be included after the real locallang file(s) and the arrays
merged together. Lets look at an example:


((generated))
"""""""""""""

Example
~~~~~~~

We want to change the label of the logout button from "Logout" to "End
session". What we do is this:

- First, find out where the label is output so you can know the label
  key and locallang file.In this case the script "alt\_menu.php" outputs
  the button which is generated by a function from the file
  "class.alt\_menu\_functions.inc". Looking into this file we find that
  the line
  "$GLOBALS['LANG']->sL('LLL:EXT:lang/locallang\_core.xml:buttons.logout')" fetches
  the label for the button.

- Create an alternative $LOCAL\_LANG array with the labelkeys you want
  to override.I have created the file "typo3conf/llor\_test.xml" which
  looks like this::

   <?xml version="1.0" encoding="UTF-8"?>
   <T3locallangExt>
     <data type="array">
       <languageKey index="en" type="array">
         <label index="buttons.logout">End session</label>
       </languageKey>
     </data>
   </T3locallangExt>

- Configure the script to override values in the file
  "EXT:lang/locallang\_core.xml". This is simply done by adding an entry
  in the $TYPO3\_CONF\_VARS['BE']['XLLfile'] array which points to the
  overriding file::

     $TYPO3_CONF_VARS['BE']['XLLfile']['EXT:lang/locallang_core.xml']='typo3conf/llor_test.xml';

  The filepath of "typo3conf/llor\_test.xml" is relative to the
  PATH\_site constant. You could also keep the file in an extension in
  which case you would have to enter the file reference like
  'EXT:myext/llor\_test.xml' - and the file will automatically be
  located wherever you extension is installed.

This example includes a function call to $GLOBALS['LANG']->sL(). If the labels
are fetched by $GLOBALS['LANG']->getLL() as they are in most modules you will
have to make sure that the locallang file you need to override was
included by the function $GLOBALS['LANG']->includeLLFile() since that will detect
any "XLLfile" you might have configured - otherwise the API will not
work of course.

